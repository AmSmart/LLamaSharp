name: Update Binaries

on:
  workflow_dispatch:
    inputs:
      llama_cpp_commit:
        description: 'Branch, tag, or commit to use for llama.cpp'
        required: true
        default: 'master'
  push:
    branches: [cron_job]
  #schedule:
  #  - cron: "22 22 * * 2"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.llama_cpp_commit }}
  cancel-in-progress: true

env:
  # Compiler defines common to all platforms
  COMMON_DEFINE: -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_TESTS=OFF -DLLAMA_BUILD_EXAMPLES=ON -DLLAMA_BUILD_SERVER=OFF -DBUILD_SHARED_LIBS=ON

jobs:
  compile-android:
    name: Compile (Android)
    strategy:
      fail-fast: true
      matrix:
        include:
          - build: 'x86'
            defines: '-DANDROID_ABI=x86'
          - build: 'x86_64'
            defines: '-DANDROID_ABI=x86_64'
          - build: 'arm64-v8a'
            defines: '-DANDROID_ABI=arm64-v8a'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ggerganov/llama.cpp
          fetch-depth: 0
          ref: '${{ github.event.inputs.llama_cpp_commit }}'
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d
          add-to-path: false
      - name: Build
        id: cmake_build
        env:
          CMAKE_FLAGS: '-DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=android-23'
        run: |
          mkdir build
          cd build
          cmake .. ${{ env.COMMON_DEFINE }} ${{ env.CMAKE_FLAGS }} ${{ matrix.defines }}
          cmake --build . --config Release -j ${env:NUMBER_OF_PROCESSORS}
      - name: Upload Llama
        uses: actions/upload-artifact@v4
        with:
          path: ./build/libllama.so
          name: llama-bin-android-${{ matrix.build }}
      - name: Upload Llava
        uses: actions/upload-artifact@v4
        with:
          path: ./build/examples/llava/libllava_shared.so
          name: llava-bin-android-${{ matrix.build }}

  
  build-deps:
    runs-on: ubuntu-latest
    name: "Gather Binaries"
    if: ${{ always() }}
    needs: [
      "compile-linux",
      "compile-android"
    ]
    steps:      
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List Files
        run: ls -R
      - name: Rearrange Files
        run: |
          # Make all directories at once
          mkdir --parents deps/{avx,avx2,avx512,osx-arm64,osx-x64,android-x86,android-x86_64,android-arm64-v8a,cu11.7.1,cu12.1.0,clblast}

          cp artifacts/llama-bin-linux-noavx-x64/libllama.so  deps/libllama.so
          cp artifacts/llama-bin-linux-avx-x64/libllama.so    deps/avx/libllama.so
          cp artifacts/llama-bin-linux-avx2-x64/libllama.so   deps/avx2/libllama.so
          cp artifacts/llama-bin-linux-avx512-x64/libllama.so deps/avx512/libllama.so

          cp artifacts/llama-bin-android-x86/libllama.so deps/android-x86/libllama.so
          cp artifacts/llava-bin-android-x86/libllava_shared.so deps/android-x86/libllava_shared.so

          cp artifacts/llama-bin-android-x86_64/libllama.so deps/android-x86_64/libllama.so
          cp artifacts/llava-bin-android-x86_64/libllava_shared.so deps/android-x86_64/libllava_shared.so
          
          cp artifacts/llama-bin-android-arm64-v8a/libllama.so deps/android-arm64-v8a/libllama.so
          cp artifacts/llava-bin-android-arm64-v8a/libllava_shared.so deps/android-arm64-v8a/libllava_shared.so

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: deps/
          name: deps


      - name: Remove Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            llama-*
            llava-*
            *.metal
